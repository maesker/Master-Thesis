#!/usr/bin/python
Import('testRunner')

import os
import glob
import sys

def unique( list ) :
         return dict.fromkeys( list ).keys()


def recursiveDirs(root) :
         return filter( ( lambda a : a.rfind( ".git") == -1 ), [ a[0] for a in os.walk( root ) ] )


def scanFiles(dir, accept=[ "*.cpp", "*.c" ], reject=["test"] ) :
         sources = []
         paths = recursiveDirs( dir )
         for path in paths:
                 for pattern in accept:
                         sources += glob.glob( path + "/" + pattern )
         for pattern in reject:
                 sources = filter( ( lambda a : a.rfind( pattern ) == -1 ), sources )
         return unique( sources )


src = ["../Client.cpp"] 
src.append( "ClientTest.cpp" )
src.append( scanFiles("../../tools") )
src.append( "../../../mm/mds/ByterangeLockManager.cpp")
src.append( scanFiles("../../../custom_protocols/storage") )
src.append( "../../../custom_protocols/pnfs/Pnfsdummy_client.cpp" )
src.append( "../../../custom_protocols/global_protocol_data.cpp" )

#src.append( "../../../coco/communication/UniqueIdGenerator.cpp" )
#src.append( "../../../coco/communication/UniqueIdGenerator.cpp" )
#src.append(     scanFiles("../../../mlt") )
src.append( scanFiles("../../../logging") )
src.append( scanFiles("../../../configuration") )
#src.append( scanFiles("../../../ebwriter") )
src.append( scanFiles("../../../pc2fsprofiler") )
#src.append( scanFiles("../../server") )
src.append( scanFiles("../../components/diskio") )
src.append( scanFiles("../../components/DataObjectCache") )
src.append( scanFiles("../../components/OperationManager") )
src.append( scanFiles("../../components/raidlibs") )
src.append( scanFiles("../../../fsal_shared") )
#src.append( scanFiles("../../tools") )


testEnv = Environment( )
testEnv.Append( LIBS = ["gtest", "gtest_main", "network_libs","pthread","Toolscollection", 'boost_system',
    'boost_program_options','boost_regex',"boost_filesystem",
    "ConfigurationManager", "Pc2fsProfiler","zmq","customExceptions", "mpi"] )

testEnv.Append( LIBPATH = [ "../../logging", "../../../lib","../../" ] ) 
testEnv.Append( CCFLAGS =  ['-std=gnu++0x', '-g'] )
testEnv.Append( CPPPATH=["network_libs","include", "mm","../../include","../../../include", "customExceptions","Toolscollection","ConfigurationManager","Pc2fsProfiler"] )
testEnv.Program( target = 'ClientTest', source = src)

Command("ClientTest.passed",'ClientTest', testRunner.runUnitTest)











src = ["../Client.cpp"] 
src.append( "ClientStressTest.cpp" )
src.append( scanFiles("../../tools") )
src.append( "../../../mm/mds/ByterangeLockManager.cpp")
src.append( scanFiles("../../../custom_protocols/storage") )
src.append( "../../../custom_protocols/pnfs/Pnfsdummy_client.cpp" )
src.append( "../../../custom_protocols/global_protocol_data.cpp" )

#src.append( "../../../coco/communication/UniqueIdGenerator.cpp" )
#src.append( "../../../coco/communication/UniqueIdGenerator.cpp" )
#src.append(     scanFiles("../../../mlt") )
src.append( scanFiles("../../../logging") )
src.append( scanFiles("../../../configuration") )
#src.append( scanFiles("../../../ebwriter") )
src.append( scanFiles("../../../pc2fsprofiler") )
#src.append( scanFiles("../../server") )
src.append( scanFiles("../../components/diskio") )
src.append( scanFiles("../../components/DataObjectCache") )
src.append( scanFiles("../../components/OperationManager") )
src.append( scanFiles("../../components/raidlibs") )
src.append( scanFiles("../../../fsal_shared") )
#src.append( scanFiles("../../tools") )


testEnv = Environment( )
testEnv.Append( LIBS = ["gtest", "gtest_main", "network_libs","pthread","Toolscollection", 'boost_system',
    'boost_program_options','boost_regex',"boost_filesystem",
    "ConfigurationManager", "Pc2fsProfiler","zmq","customExceptions", "mpi"] )

testEnv.Append( LIBPATH = [ "../../logging", "../../../lib","../../" ] ) 
testEnv.Append( CCFLAGS =  ['-std=gnu++0x', '-g'] )
testEnv.Append( CPPPATH=["network_libs","include", "mm","../../include","../../../include", "customExceptions","Toolscollection","ConfigurationManager","Pc2fsProfiler"] )
testEnv.Program( target = 'ClientStressTest', source = src)

Command("ClientStressTest.passed",'ClientStressTest', testRunner.runUnitTest)

