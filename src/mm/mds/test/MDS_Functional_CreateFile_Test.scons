#!/usr/bin/python
Import('testRunner')

import os
import glob
import sys

def unique( list ) :
         return dict.fromkeys( list ).keys()


def recursiveDirs(root) :
         return filter( ( lambda a : a.rfind( ".git") == -1 ), [ a[0] for a in os.walk( root ) ] )


def scanFiles(dir, accept=[ "*.cpp", "*.c" ], reject=["test"] ) :
         sources = []
         paths = recursiveDirs( dir )
         for path in paths:
                 for pattern in accept:
                         sources += glob.glob( path + "/" + pattern )
         for pattern in reject:
                 sources = filter( ( lambda a : a.rfind( pattern ) == -1 ), sources )
         return unique( sources )



testSrc = scanFiles("../")
testSrc.append( ("./MDS_Functional_CreateFile_Test.cpp") )
testSrc.append( ("./ZmqFsalHelper.cpp"))
testSrc.append( ("./Validator.cpp"))
testSrc.append( ("./AbstractMDSTest.cpp"))

#testSrc.append( scanFiles("../../storage"))
testSrc.append( scanFiles("../../../exceptions"))
#testSrc.append( scanFiles("../../journal"))
#testSrc.append( scanFiles("../../../coco/coordination"))
#testSrc.append( scanFiles("../../../coco/communication"))
#testSrc.append( scanFiles("../../../coco/loadbalancing"))
#testSrc.append( scanFiles("../../../coco/administration"))
#testSrc.append( scanFiles("../../einodeio"))
testSrc.append( scanFiles("../../../configuration"))
#testSrc.append( scanFiles("../../storage"))
testSrc.append( scanFiles("../../../ebwriter"))
testSrc.append( scanFiles("../../../mlt"))
testSrc.append( scanFiles("../../../pc2fsprofiler"))


testEnv = Environment( )
testEnv.Append( LIBS = ['mm', "gtest", "gtest_main", "Pc2fsProfiler","boost_thread", "boost_filesystem", "Logger", 'zmq' , "boost_system","boost_program_options", 'coco'] )
testEnv.Append( LIBPATH = [ "../../../logging", "../../../pc2fsprofiler","../../../lib"] ) 
testEnv.Append( CCFLAGS =  ['-std=gnu++0x', '-g'] )
testEnv.Append( CPPPATH=['../../../include'])
testEnv.Program( target = 'MDS_Functional_CreateFile_Test', source = testSrc)

Command("MDS_Functional_CreateFile_Test.passed",'MDS_Functional_CreateFile_Test', testRunner.runUnitTest)
